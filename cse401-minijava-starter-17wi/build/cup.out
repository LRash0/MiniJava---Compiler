===== Terminals =====
[0]EOF [1]error [2]PUBLIC [3]MAIN [4]CLASS 
[5]EXTENDS [6]BOOLEANTYPE [7]IF [8]ELSE [9]WHILE 
[10]PRINTLN [11]LENGTH [12]INTTYPE [13]DOUBLETYPE [14]NEW 
[15]RETURN [16]THIS [17]TRUE [18]FALSE [19]PLUS 
[20]BECOMES [21]AND [22]LT [23]MINUS [24]TIMES 
[25]BANG [26]LPAREN [27]RPAREN [28]LBRACE [29]RBRACE 
[30]LFREEBRACE [31]RFREEBRACE [32]SEMICOLON [33]COMMA [34]PERIOD 
[35]IDENTIFIER [36]INTEGERLITERAL [37]DOUBLELITERAL 

===== Non terminals =====
[0]Program [1]Statement [2]AssignStatement [3]Expression [4]Identifier 
[5]Type [6]MainClass [7]ClassDecl [8]VarDecl [9]VarDeclList 
[10]MethodDecl [11]MethodDeclList [12]FormalList [13]Formal [14]StatementList 
[15]ArrayAssign [16]ExpList 

===== Productions =====
[0] Program ::= MainClass 
[1] $START ::= Program EOF 
[2] Program ::= Program ClassDecl 
[3] MainClass ::= CLASS Identifier LFREEBRACE MAIN Identifier RPAREN LFREEBRACE Statement RFREEBRACE RFREEBRACE 
[4] ClassDecl ::= CLASS Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE 
[5] ClassDecl ::= CLASS Identifier EXTENDS Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE 
[6] VarDecl ::= Type Identifier SEMICOLON 
[7] VarDeclList ::= VarDeclList VarDecl 
[8] VarDeclList ::= 
[9] MethodDeclList ::= MethodDeclList MethodDecl 
[10] MethodDeclList ::= 
[11] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE 
[12] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE 
[13] FormalList ::= Formal 
[14] FormalList ::= FormalList COMMA Formal 
[15] Formal ::= Type Identifier 
[16] StatementList ::= 
[17] StatementList ::= Statement StatementList 
[18] ExpList ::= Expression 
[19] ExpList ::= ExpList COMMA Expression 
[20] Type ::= INTTYPE 
[21] Type ::= BOOLEANTYPE 
[22] Type ::= DOUBLETYPE 
[23] Type ::= INTTYPE LBRACE RBRACE 
[24] Type ::= Identifier 
[25] Statement ::= LFREEBRACE StatementList RFREEBRACE 
[26] Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
[27] Statement ::= WHILE LPAREN Expression RPAREN Statement 
[28] Statement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON 
[29] Statement ::= AssignStatement 
[30] Statement ::= ArrayAssign 
[31] AssignStatement ::= Identifier BECOMES Expression SEMICOLON 
[32] ArrayAssign ::= Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON 
[33] Identifier ::= IDENTIFIER 
[34] Expression ::= Expression LBRACE Expression RBRACE 
[35] Expression ::= Expression PLUS Expression 
[36] Expression ::= Expression MINUS Expression 
[37] Expression ::= Expression TIMES Expression 
[38] Expression ::= Expression AND Expression 
[39] Expression ::= Expression LT Expression 
[40] Expression ::= Expression PERIOD LENGTH 
[41] Expression ::= LPAREN Expression RPAREN 
[42] Expression ::= INTEGERLITERAL 
[43] Expression ::= DOUBLELITERAL 
[44] Expression ::= TRUE 
[45] Expression ::= FALSE 
[46] Expression ::= IDENTIFIER 
[47] Expression ::= THIS 
[48] Expression ::= NEW INTTYPE LBRACE Expression RBRACE 
[49] Expression ::= NEW Identifier LPAREN RPAREN 
[50] Expression ::= BANG Expression 
[51] Expression ::= Expression PERIOD Identifier LPAREN RPAREN 
[52] Expression ::= Expression PERIOD Identifier LPAREN ExpList RPAREN 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Program ::= (*) Program ClassDecl , {EOF CLASS }]
  [$START ::= (*) Program EOF , {EOF }]
  [MainClass ::= (*) CLASS Identifier LFREEBRACE MAIN Identifier RPAREN LFREEBRACE Statement RFREEBRACE RFREEBRACE , {EOF CLASS }]
  [Program ::= (*) MainClass , {EOF CLASS }]
}
transition on CLASS to state [3]
transition on MainClass to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
  [Program ::= Program (*) ClassDecl , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [92]
transition on CLASS to state [91]
transition on ClassDecl to state [90]

-------------------
lalr_state [2]: {
  [Program ::= MainClass (*) , {EOF CLASS }]
}

-------------------
lalr_state [3]: {
  [MainClass ::= CLASS (*) Identifier LFREEBRACE MAIN Identifier RPAREN LFREEBRACE Statement RFREEBRACE RFREEBRACE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {LFREEBRACE }]
}
transition on Identifier to state [5]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [4]: {
  [Identifier ::= IDENTIFIER (*) , {EXTENDS BECOMES LPAREN RPAREN LBRACE LFREEBRACE SEMICOLON COMMA IDENTIFIER }]
}

-------------------
lalr_state [5]: {
  [MainClass ::= CLASS Identifier (*) LFREEBRACE MAIN Identifier RPAREN LFREEBRACE Statement RFREEBRACE RFREEBRACE , {EOF CLASS }]
}
transition on LFREEBRACE to state [6]

-------------------
lalr_state [6]: {
  [MainClass ::= CLASS Identifier LFREEBRACE (*) MAIN Identifier RPAREN LFREEBRACE Statement RFREEBRACE RFREEBRACE , {EOF CLASS }]
}
transition on MAIN to state [7]

-------------------
lalr_state [7]: {
  [MainClass ::= CLASS Identifier LFREEBRACE MAIN (*) Identifier RPAREN LFREEBRACE Statement RFREEBRACE RFREEBRACE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {RPAREN }]
}
transition on Identifier to state [8]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [8]: {
  [MainClass ::= CLASS Identifier LFREEBRACE MAIN Identifier (*) RPAREN LFREEBRACE Statement RFREEBRACE RFREEBRACE , {EOF CLASS }]
}
transition on RPAREN to state [9]

-------------------
lalr_state [9]: {
  [MainClass ::= CLASS Identifier LFREEBRACE MAIN Identifier RPAREN (*) LFREEBRACE Statement RFREEBRACE RFREEBRACE , {EOF CLASS }]
}
transition on LFREEBRACE to state [10]

-------------------
lalr_state [10]: {
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {RFREEBRACE }]
  [Statement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {RFREEBRACE }]
  [Statement ::= (*) LFREEBRACE StatementList RFREEBRACE , {RFREEBRACE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACE }]
  [Statement ::= (*) ArrayAssign , {RFREEBRACE }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {RFREEBRACE }]
  [MainClass ::= CLASS Identifier LFREEBRACE MAIN Identifier RPAREN LFREEBRACE (*) Statement RFREEBRACE RFREEBRACE , {EOF CLASS }]
  [ArrayAssign ::= (*) Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {RFREEBRACE }]
  [Statement ::= (*) AssignStatement , {RFREEBRACE }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {RFREEBRACE }]
}
transition on AssignStatement to state [18]
transition on IDENTIFIER to state [4]
transition on Statement to state [17]
transition on IF to state [16]
transition on Identifier to state [15]
transition on ArrayAssign to state [14]
transition on PRINTLN to state [13]
transition on LFREEBRACE to state [12]
transition on WHILE to state [11]

-------------------
lalr_state [11]: {
  [Statement ::= WHILE (*) LPAREN Expression RPAREN Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on LPAREN to state [86]

-------------------
lalr_state [12]: {
  [StatementList ::= (*) Statement StatementList , {RFREEBRACE }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {IF WHILE PRINTLN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {IF WHILE PRINTLN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= LFREEBRACE (*) StatementList RFREEBRACE , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) LFREEBRACE StatementList RFREEBRACE , {IF WHILE PRINTLN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [StatementList ::= (*) , {RFREEBRACE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACE }]
  [Statement ::= (*) ArrayAssign , {IF WHILE PRINTLN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF WHILE PRINTLN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [ArrayAssign ::= (*) Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {IF WHILE PRINTLN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {IF WHILE PRINTLN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF WHILE PRINTLN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on AssignStatement to state [18]
transition on IDENTIFIER to state [4]
transition on Statement to state [83]
transition on IF to state [16]
transition on Identifier to state [15]
transition on ArrayAssign to state [14]
transition on PRINTLN to state [13]
transition on StatementList to state [82]
transition on LFREEBRACE to state [12]
transition on WHILE to state [11]

-------------------
lalr_state [13]: {
  [Statement ::= PRINTLN (*) LPAREN Expression RPAREN SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on LPAREN to state [78]

-------------------
lalr_state [14]: {
  [Statement ::= ArrayAssign (*) , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [15]: {
  [ArrayAssign ::= Identifier (*) LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [AssignStatement ::= Identifier (*) BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on BECOMES to state [70]
transition on LBRACE to state [69]

-------------------
lalr_state [16]: {
  [Statement ::= IF (*) LPAREN Expression RPAREN Statement ELSE Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on LPAREN to state [21]

-------------------
lalr_state [17]: {
  [MainClass ::= CLASS Identifier LFREEBRACE MAIN Identifier RPAREN LFREEBRACE Statement (*) RFREEBRACE RFREEBRACE , {EOF CLASS }]
}
transition on RFREEBRACE to state [19]

-------------------
lalr_state [18]: {
  [Statement ::= AssignStatement (*) , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [19]: {
  [MainClass ::= CLASS Identifier LFREEBRACE MAIN Identifier RPAREN LFREEBRACE Statement RFREEBRACE (*) RFREEBRACE , {EOF CLASS }]
}
transition on RFREEBRACE to state [20]

-------------------
lalr_state [20]: {
  [MainClass ::= CLASS Identifier LFREEBRACE MAIN Identifier RPAREN LFREEBRACE Statement RFREEBRACE RFREEBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [21]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Statement ::= IF LPAREN (*) Expression RPAREN Statement ELSE Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [25]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [22]: {
  [Expression ::= NEW (*) Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= NEW (*) INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
}
transition on Identifier to state [63]
transition on INTTYPE to state [62]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [23]: {
  [Expression ::= TRUE (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [24]: {
  [Expression ::= DOUBLELITERAL (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [25]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Statement ::= IF LPAREN Expression (*) RPAREN Statement ELSE Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on RPAREN to state [58]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [26]: {
  [Expression ::= FALSE (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [27]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= BANG (*) Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [57]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [28]: {
  [Expression ::= THIS (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [29]: {
  [Expression ::= IDENTIFIER (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [30]: {
  [Expression ::= INTEGERLITERAL (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [31]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= LPAREN (*) Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [32]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [32]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= LPAREN Expression (*) RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on RPAREN to state [35]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [33]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression LT (*) Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [56]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [34]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression LBRACE (*) Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [54]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [35]: {
  [Expression ::= LPAREN Expression RPAREN (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [36]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression AND (*) Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [53]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [37]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression PLUS (*) Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [52]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [38]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression MINUS (*) Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [51]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [39]: {
  [Expression ::= Expression PERIOD (*) Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression PERIOD (*) LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression PERIOD (*) Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
}
transition on Identifier to state [43]
transition on IDENTIFIER to state [4]
transition on LENGTH to state [42]

-------------------
lalr_state [40]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression TIMES (*) Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [41]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [41]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression TIMES Expression (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [42]: {
  [Expression ::= Expression PERIOD LENGTH (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [43]: {
  [Expression ::= Expression PERIOD Identifier (*) LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression PERIOD Identifier (*) LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LPAREN to state [44]

-------------------
lalr_state [44]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [ExpList ::= (*) Expression , {RPAREN COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression PERIOD Identifier LPAREN (*) RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [ExpList ::= (*) ExpList COMMA Expression , {RPAREN COMMA }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression PERIOD Identifier LPAREN (*) ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on RPAREN to state [47]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on ExpList to state [46]
transition on Expression to state [45]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [45]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [ExpList ::= Expression (*) , {RPAREN COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [46]: {
  [Expression ::= Expression PERIOD Identifier LPAREN ExpList (*) RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [ExpList ::= ExpList (*) COMMA Expression , {RPAREN COMMA }]
}
transition on RPAREN to state [49]
transition on COMMA to state [48]

-------------------
lalr_state [47]: {
  [Expression ::= Expression PERIOD Identifier LPAREN RPAREN (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [48]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [ExpList ::= ExpList COMMA (*) Expression , {RPAREN COMMA }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [50]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [49]: {
  [Expression ::= Expression PERIOD Identifier LPAREN ExpList RPAREN (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [50]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [ExpList ::= ExpList COMMA Expression (*) , {RPAREN COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE COMMA PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [51]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression MINUS Expression (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [52]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression PLUS Expression (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [53]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression AND Expression (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [54]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression LBRACE Expression (*) RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on RBRACE to state [55]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [55]: {
  [Expression ::= Expression LBRACE Expression RBRACE (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [56]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression LT Expression (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [57]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= BANG Expression (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [58]: {
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {ELSE }]
  [Statement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {ELSE }]
  [Statement ::= (*) LFREEBRACE StatementList RFREEBRACE , {ELSE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACE }]
  [Statement ::= (*) ArrayAssign , {ELSE }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ELSE }]
  [Statement ::= IF LPAREN Expression RPAREN (*) Statement ELSE Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [ArrayAssign ::= (*) Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {ELSE }]
  [Statement ::= (*) AssignStatement , {ELSE }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ELSE }]
}
transition on AssignStatement to state [18]
transition on IDENTIFIER to state [4]
transition on Statement to state [59]
transition on IF to state [16]
transition on Identifier to state [15]
transition on ArrayAssign to state [14]
transition on PRINTLN to state [13]
transition on LFREEBRACE to state [12]
transition on WHILE to state [11]

-------------------
lalr_state [59]: {
  [Statement ::= IF LPAREN Expression RPAREN Statement (*) ELSE Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on ELSE to state [60]

-------------------
lalr_state [60]: {
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) LFREEBRACE StatementList RFREEBRACE , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACE }]
  [Statement ::= (*) ArrayAssign , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= IF LPAREN Expression RPAREN Statement ELSE (*) Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [ArrayAssign ::= (*) Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on AssignStatement to state [18]
transition on IDENTIFIER to state [4]
transition on Statement to state [61]
transition on IF to state [16]
transition on Identifier to state [15]
transition on ArrayAssign to state [14]
transition on PRINTLN to state [13]
transition on LFREEBRACE to state [12]
transition on WHILE to state [11]

-------------------
lalr_state [61]: {
  [Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement (*) , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [62]: {
  [Expression ::= NEW INTTYPE (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LBRACE to state [66]

-------------------
lalr_state [63]: {
  [Expression ::= NEW Identifier (*) LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on LPAREN to state [64]

-------------------
lalr_state [64]: {
  [Expression ::= NEW Identifier LPAREN (*) RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}
transition on RPAREN to state [65]

-------------------
lalr_state [65]: {
  [Expression ::= NEW Identifier LPAREN RPAREN (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [66]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= NEW INTTYPE LBRACE (*) Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [67]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [67]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= NEW INTTYPE LBRACE Expression (*) RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on RBRACE to state [68]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [68]: {
  [Expression ::= NEW INTTYPE LBRACE Expression RBRACE (*) , {PLUS AND LT MINUS TIMES RPAREN LBRACE RBRACE SEMICOLON COMMA PERIOD }]
}

-------------------
lalr_state [69]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [ArrayAssign ::= Identifier LBRACE (*) Expression RBRACE BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [73]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [70]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [AssignStatement ::= Identifier BECOMES (*) Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [71]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [71]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [AssignStatement ::= Identifier BECOMES Expression (*) SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on SEMICOLON to state [72]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [72]: {
  [AssignStatement ::= Identifier BECOMES Expression SEMICOLON (*) , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [73]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [ArrayAssign ::= Identifier LBRACE Expression (*) RBRACE BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE RBRACE PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on RBRACE to state [74]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [74]: {
  [ArrayAssign ::= Identifier LBRACE Expression RBRACE (*) BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on BECOMES to state [75]

-------------------
lalr_state [75]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [ArrayAssign ::= Identifier LBRACE Expression RBRACE BECOMES (*) Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [76]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [76]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [ArrayAssign ::= Identifier LBRACE Expression RBRACE BECOMES Expression (*) SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on SEMICOLON to state [77]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [77]: {
  [ArrayAssign ::= Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON (*) , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [78]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Statement ::= PRINTLN LPAREN (*) Expression RPAREN SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [79]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [79]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Statement ::= PRINTLN LPAREN Expression (*) RPAREN SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on RPAREN to state [80]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [80]: {
  [Statement ::= PRINTLN LPAREN Expression RPAREN (*) SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on SEMICOLON to state [81]

-------------------
lalr_state [81]: {
  [Statement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON (*) , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [82]: {
  [Statement ::= LFREEBRACE StatementList (*) RFREEBRACE , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on RFREEBRACE to state [85]

-------------------
lalr_state [83]: {
  [StatementList ::= Statement (*) StatementList , {RETURN RFREEBRACE }]
  [StatementList ::= (*) Statement StatementList , {RETURN RFREEBRACE }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) LFREEBRACE StatementList RFREEBRACE , {IF WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [StatementList ::= (*) , {RETURN RFREEBRACE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACE }]
  [Statement ::= (*) ArrayAssign , {IF WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [ArrayAssign ::= (*) Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {IF WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on AssignStatement to state [18]
transition on IDENTIFIER to state [4]
transition on Statement to state [83]
transition on IF to state [16]
transition on Identifier to state [15]
transition on ArrayAssign to state [14]
transition on PRINTLN to state [13]
transition on StatementList to state [84]
transition on LFREEBRACE to state [12]
transition on WHILE to state [11]

-------------------
lalr_state [84]: {
  [StatementList ::= Statement StatementList (*) , {RETURN RFREEBRACE }]
}

-------------------
lalr_state [85]: {
  [Statement ::= LFREEBRACE StatementList RFREEBRACE (*) , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [86]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Statement ::= WHILE LPAREN (*) Expression RPAREN Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [87]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [87]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Statement ::= WHILE LPAREN Expression (*) RPAREN Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES RPAREN LBRACE PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on RPAREN to state [88]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [88]: {
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) LFREEBRACE StatementList RFREEBRACE , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= WHILE LPAREN Expression RPAREN (*) Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACE }]
  [Statement ::= (*) ArrayAssign , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [ArrayAssign ::= (*) Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on AssignStatement to state [18]
transition on IDENTIFIER to state [4]
transition on Statement to state [89]
transition on IF to state [16]
transition on Identifier to state [15]
transition on ArrayAssign to state [14]
transition on PRINTLN to state [13]
transition on LFREEBRACE to state [12]
transition on WHILE to state [11]

-------------------
lalr_state [89]: {
  [Statement ::= WHILE LPAREN Expression RPAREN Statement (*) , {IF ELSE WHILE PRINTLN RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [90]: {
  [Program ::= Program ClassDecl (*) , {EOF CLASS }]
}

-------------------
lalr_state [91]: {
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {EXTENDS LFREEBRACE }]
}
transition on Identifier to state [93]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [92]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
lalr_state [93]: {
  [ClassDecl ::= CLASS Identifier (*) LFREEBRACE VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
}
transition on LFREEBRACE to state [95]
transition on EXTENDS to state [94]

-------------------
lalr_state [94]: {
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {LFREEBRACE }]
}
transition on Identifier to state [137]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [95]: {
  [VarDeclList ::= (*) , {PUBLIC BOOLEANTYPE INTTYPE DOUBLETYPE RFREEBRACE IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LFREEBRACE (*) VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {PUBLIC BOOLEANTYPE INTTYPE DOUBLETYPE RFREEBRACE IDENTIFIER }]
}
transition on VarDeclList to state [96]

-------------------
lalr_state [96]: {
  [Type ::= (*) INTTYPE , {IDENTIFIER }]
  [Type ::= (*) DOUBLETYPE , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LFREEBRACE VarDeclList (*) MethodDeclList RFREEBRACE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {PUBLIC BOOLEANTYPE INTTYPE DOUBLETYPE RFREEBRACE IDENTIFIER }]
  [MethodDeclList ::= (*) , {PUBLIC RFREEBRACE }]
  [Type ::= (*) Identifier , {IDENTIFIER }]
  [Type ::= (*) BOOLEANTYPE , {IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RFREEBRACE }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {PUBLIC BOOLEANTYPE INTTYPE DOUBLETYPE RFREEBRACE IDENTIFIER }]
  [Type ::= (*) INTTYPE LBRACE RBRACE , {IDENTIFIER }]
}
transition on DOUBLETYPE to state [103]
transition on Identifier to state [102]
transition on BOOLEANTYPE to state [101]
transition on INTTYPE to state [100]
transition on IDENTIFIER to state [4]
transition on MethodDeclList to state [99]
transition on VarDecl to state [98]
transition on Type to state [97]

-------------------
lalr_state [97]: {
  [VarDecl ::= Type (*) Identifier SEMICOLON , {PUBLIC BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {SEMICOLON }]
}
transition on Identifier to state [135]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [98]: {
  [VarDeclList ::= VarDeclList VarDecl (*) , {PUBLIC BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [99]: {
  [ClassDecl ::= CLASS Identifier LFREEBRACE VarDeclList MethodDeclList (*) RFREEBRACE , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RFREEBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on PUBLIC to state [108]
transition on MethodDecl to state [107]
transition on RFREEBRACE to state [106]

-------------------
lalr_state [100]: {
  [Type ::= INTTYPE (*) LBRACE RBRACE , {IDENTIFIER }]
  [Type ::= INTTYPE (*) , {IDENTIFIER }]
}
transition on LBRACE to state [104]

-------------------
lalr_state [101]: {
  [Type ::= BOOLEANTYPE (*) , {IDENTIFIER }]
}

-------------------
lalr_state [102]: {
  [Type ::= Identifier (*) , {IDENTIFIER }]
}

-------------------
lalr_state [103]: {
  [Type ::= DOUBLETYPE (*) , {IDENTIFIER }]
}

-------------------
lalr_state [104]: {
  [Type ::= INTTYPE LBRACE (*) RBRACE , {IDENTIFIER }]
}
transition on RBRACE to state [105]

-------------------
lalr_state [105]: {
  [Type ::= INTTYPE LBRACE RBRACE (*) , {IDENTIFIER }]
}

-------------------
lalr_state [106]: {
  [ClassDecl ::= CLASS Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [107]: {
  [MethodDeclList ::= MethodDeclList MethodDecl (*) , {PUBLIC RFREEBRACE }]
}

-------------------
lalr_state [108]: {
  [Type ::= (*) Identifier , {IDENTIFIER }]
  [Type ::= (*) BOOLEANTYPE , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Type ::= (*) INTTYPE LBRACE RBRACE , {IDENTIFIER }]
  [Type ::= (*) INTTYPE , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) DOUBLETYPE , {IDENTIFIER }]
}
transition on Identifier to state [102]
transition on DOUBLETYPE to state [103]
transition on BOOLEANTYPE to state [101]
transition on INTTYPE to state [100]
transition on IDENTIFIER to state [4]
transition on Type to state [109]

-------------------
lalr_state [109]: {
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
}
transition on Identifier to state [110]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [110]: {
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on LPAREN to state [111]

-------------------
lalr_state [111]: {
  [Type ::= (*) INTTYPE , {IDENTIFIER }]
  [FormalList ::= (*) FormalList COMMA Formal , {RPAREN COMMA }]
  [Type ::= (*) DOUBLETYPE , {IDENTIFIER }]
  [FormalList ::= (*) Formal , {RPAREN COMMA }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Type ::= (*) Identifier , {IDENTIFIER }]
  [Type ::= (*) BOOLEANTYPE , {IDENTIFIER }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [Type ::= (*) INTTYPE LBRACE RBRACE , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on BOOLEANTYPE to state [101]
transition on FormalList to state [115]
transition on INTTYPE to state [100]
transition on IDENTIFIER to state [4]
transition on RPAREN to state [114]
transition on DOUBLETYPE to state [103]
transition on Identifier to state [102]
transition on Formal to state [113]
transition on Type to state [112]

-------------------
lalr_state [112]: {
  [Formal ::= Type (*) Identifier , {RPAREN COMMA }]
  [Identifier ::= (*) IDENTIFIER , {RPAREN COMMA }]
}
transition on Identifier to state [134]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [113]: {
  [FormalList ::= Formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [114]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on LFREEBRACE to state [127]

-------------------
lalr_state [115]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [FormalList ::= FormalList (*) COMMA Formal , {RPAREN COMMA }]
}
transition on RPAREN to state [117]
transition on COMMA to state [116]

-------------------
lalr_state [116]: {
  [Type ::= (*) Identifier , {IDENTIFIER }]
  [Type ::= (*) BOOLEANTYPE , {IDENTIFIER }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [Type ::= (*) INTTYPE LBRACE RBRACE , {IDENTIFIER }]
  [Type ::= (*) INTTYPE , {IDENTIFIER }]
  [FormalList ::= FormalList COMMA (*) Formal , {RPAREN COMMA }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) DOUBLETYPE , {IDENTIFIER }]
}
transition on Identifier to state [102]
transition on DOUBLETYPE to state [103]
transition on BOOLEANTYPE to state [101]
transition on INTTYPE to state [100]
transition on IDENTIFIER to state [4]
transition on Type to state [112]
transition on Formal to state [126]

-------------------
lalr_state [117]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on LFREEBRACE to state [118]

-------------------
lalr_state [118]: {
  [VarDeclList ::= (*) , {BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE IDENTIFIER }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE (*) VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on VarDeclList to state [119]

-------------------
lalr_state [119]: {
  [Type ::= (*) INTTYPE , {IDENTIFIER }]
  [Statement ::= (*) LFREEBRACE StatementList RFREEBRACE , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssign , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [Type ::= (*) INTTYPE LBRACE RBRACE , {IDENTIFIER }]
  [Statement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACE IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE IDENTIFIER }]
  [StatementList ::= (*) , {RETURN }]
  [Type ::= (*) BOOLEANTYPE , {IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList (*) StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Type ::= (*) Identifier , {IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE IDENTIFIER }]
  [StatementList ::= (*) Statement StatementList , {RETURN }]
  [Type ::= (*) DOUBLETYPE , {IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [ArrayAssign ::= (*) Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
}
transition on BOOLEANTYPE to state [101]
transition on INTTYPE to state [100]
transition on AssignStatement to state [18]
transition on IDENTIFIER to state [4]
transition on Statement to state [83]
transition on IF to state [16]
transition on DOUBLETYPE to state [103]
transition on Identifier to state [121]
transition on VarDecl to state [98]
transition on ArrayAssign to state [14]
transition on PRINTLN to state [13]
transition on StatementList to state [120]
transition on LFREEBRACE to state [12]
transition on WHILE to state [11]
transition on Type to state [97]

-------------------
lalr_state [120]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList (*) RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on RETURN to state [122]

-------------------
lalr_state [121]: {
  [Type ::= Identifier (*) , {IDENTIFIER }]
  [ArrayAssign ::= Identifier (*) LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [AssignStatement ::= Identifier (*) BECOMES Expression SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
}
transition on BECOMES to state [70]
transition on LBRACE to state [69]

-------------------
lalr_state [122]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN (*) Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [123]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [123]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression (*) SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on SEMICOLON to state [124]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [124]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON (*) RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on RFREEBRACE to state [125]

-------------------
lalr_state [125]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE (*) , {PUBLIC RFREEBRACE }]
}

-------------------
lalr_state [126]: {
  [FormalList ::= FormalList COMMA Formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [127]: {
  [VarDeclList ::= (*) , {BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE IDENTIFIER }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE (*) VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on VarDeclList to state [128]

-------------------
lalr_state [128]: {
  [Type ::= (*) INTTYPE , {IDENTIFIER }]
  [Statement ::= (*) LFREEBRACE StatementList RFREEBRACE , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssign , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [Type ::= (*) INTTYPE LBRACE RBRACE , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList (*) StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Statement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACE IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE IDENTIFIER }]
  [StatementList ::= (*) , {RETURN }]
  [Type ::= (*) BOOLEANTYPE , {IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [Type ::= (*) Identifier , {IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE IDENTIFIER }]
  [StatementList ::= (*) Statement StatementList , {RETURN }]
  [Type ::= (*) DOUBLETYPE , {IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
  [ArrayAssign ::= (*) Identifier LBRACE Expression RBRACE BECOMES Expression SEMICOLON , {IF WHILE PRINTLN RETURN LFREEBRACE IDENTIFIER }]
}
transition on BOOLEANTYPE to state [101]
transition on INTTYPE to state [100]
transition on AssignStatement to state [18]
transition on IDENTIFIER to state [4]
transition on Statement to state [83]
transition on IF to state [16]
transition on DOUBLETYPE to state [103]
transition on Identifier to state [121]
transition on VarDecl to state [98]
transition on ArrayAssign to state [14]
transition on PRINTLN to state [13]
transition on StatementList to state [129]
transition on LFREEBRACE to state [12]
transition on WHILE to state [11]
transition on Type to state [97]

-------------------
lalr_state [129]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList (*) RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on RETURN to state [130]

-------------------
lalr_state [130]: {
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) BANG Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN (*) Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Expression ::= (*) Expression AND Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) DOUBLELITERAL , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INTTYPE LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGERLITERAL , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
}
transition on LPAREN to state [31]
transition on INTEGERLITERAL to state [30]
transition on IDENTIFIER to state [29]
transition on THIS to state [28]
transition on BANG to state [27]
transition on FALSE to state [26]
transition on Expression to state [131]
transition on DOUBLELITERAL to state [24]
transition on TRUE to state [23]
transition on NEW to state [22]

-------------------
lalr_state [131]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACE Expression RBRACE , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression (*) SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [Expression ::= Expression (*) AND Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpList RPAREN , {PLUS AND LT MINUS TIMES LBRACE SEMICOLON PERIOD }]
}
transition on TIMES to state [40]
transition on PERIOD to state [39]
transition on MINUS to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on SEMICOLON to state [132]
transition on LBRACE to state [34]
transition on LT to state [33]

-------------------
lalr_state [132]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON (*) RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on RFREEBRACE to state [133]

-------------------
lalr_state [133]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE (*) , {PUBLIC RFREEBRACE }]
}

-------------------
lalr_state [134]: {
  [Formal ::= Type Identifier (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [135]: {
  [VarDecl ::= Type Identifier (*) SEMICOLON , {PUBLIC BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}
transition on SEMICOLON to state [136]

-------------------
lalr_state [136]: {
  [VarDecl ::= Type Identifier SEMICOLON (*) , {PUBLIC BOOLEANTYPE IF WHILE PRINTLN INTTYPE DOUBLETYPE RETURN LFREEBRACE RFREEBRACE IDENTIFIER }]
}

-------------------
lalr_state [137]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LFREEBRACE VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
}
transition on LFREEBRACE to state [138]

-------------------
lalr_state [138]: {
  [VarDeclList ::= (*) , {PUBLIC BOOLEANTYPE INTTYPE DOUBLETYPE RFREEBRACE IDENTIFIER }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {PUBLIC BOOLEANTYPE INTTYPE DOUBLETYPE RFREEBRACE IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LFREEBRACE (*) VarDeclList MethodDeclList RFREEBRACE , {EOF CLASS }]
}
transition on VarDeclList to state [139]

-------------------
lalr_state [139]: {
  [Type ::= (*) INTTYPE , {IDENTIFIER }]
  [Type ::= (*) DOUBLETYPE , {IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {PUBLIC BOOLEANTYPE INTTYPE DOUBLETYPE RFREEBRACE IDENTIFIER }]
  [MethodDeclList ::= (*) , {PUBLIC RFREEBRACE }]
  [Type ::= (*) Identifier , {IDENTIFIER }]
  [Type ::= (*) BOOLEANTYPE , {IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RFREEBRACE }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {PUBLIC BOOLEANTYPE INTTYPE DOUBLETYPE RFREEBRACE IDENTIFIER }]
  [Type ::= (*) INTTYPE LBRACE RBRACE , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LFREEBRACE VarDeclList (*) MethodDeclList RFREEBRACE , {EOF CLASS }]
}
transition on DOUBLETYPE to state [103]
transition on Identifier to state [102]
transition on BOOLEANTYPE to state [101]
transition on INTTYPE to state [100]
transition on IDENTIFIER to state [4]
transition on VarDecl to state [98]
transition on MethodDeclList to state [140]
transition on Type to state [97]

-------------------
lalr_state [140]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LFREEBRACE VarDeclList MethodDeclList (*) RFREEBRACE , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RFREEBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LFREEBRACE VarDeclList StatementList RETURN Expression SEMICOLON RFREEBRACE , {PUBLIC RFREEBRACE }]
}
transition on PUBLIC to state [108]
transition on MethodDecl to state [107]
transition on RFREEBRACE to state [141]

-------------------
lalr_state [141]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LFREEBRACE VarDeclList MethodDeclList RFREEBRACE (*) , {EOF CLASS }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 4:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 92)] [term 4:SHIFT(to state 91)]
From state #2
 [term 0:REDUCE(with prod 0)] [term 4:REDUCE(with prod 0)]
From state #3
 [term 35:SHIFT(to state 4)]
From state #4
 [term 5:REDUCE(with prod 33)] [term 20:REDUCE(with prod 33)]
 [term 26:REDUCE(with prod 33)] [term 27:REDUCE(with prod 33)]
 [term 28:REDUCE(with prod 33)] [term 30:REDUCE(with prod 33)]
 [term 32:REDUCE(with prod 33)] [term 33:REDUCE(with prod 33)]
 [term 35:REDUCE(with prod 33)]
From state #5
 [term 30:SHIFT(to state 6)]
From state #6
 [term 3:SHIFT(to state 7)]
From state #7
 [term 35:SHIFT(to state 4)]
From state #8
 [term 27:SHIFT(to state 9)]
From state #9
 [term 30:SHIFT(to state 10)]
From state #10
 [term 7:SHIFT(to state 16)] [term 9:SHIFT(to state 11)]
 [term 10:SHIFT(to state 13)] [term 30:SHIFT(to state 12)]
 [term 35:SHIFT(to state 4)]
From state #11
 [term 26:SHIFT(to state 86)]
From state #12
 [term 7:SHIFT(to state 16)] [term 9:SHIFT(to state 11)]
 [term 10:SHIFT(to state 13)] [term 30:SHIFT(to state 12)]
 [term 31:REDUCE(with prod 16)] [term 35:SHIFT(to state 4)]
From state #13
 [term 26:SHIFT(to state 78)]
From state #14
 [term 7:REDUCE(with prod 30)] [term 8:REDUCE(with prod 30)]
 [term 9:REDUCE(with prod 30)] [term 10:REDUCE(with prod 30)]
 [term 15:REDUCE(with prod 30)] [term 30:REDUCE(with prod 30)]
 [term 31:REDUCE(with prod 30)] [term 35:REDUCE(with prod 30)]
From state #15
 [term 20:SHIFT(to state 70)] [term 28:SHIFT(to state 69)]
From state #16
 [term 26:SHIFT(to state 21)]
From state #17
 [term 31:SHIFT(to state 19)]
From state #18
 [term 7:REDUCE(with prod 29)] [term 8:REDUCE(with prod 29)]
 [term 9:REDUCE(with prod 29)] [term 10:REDUCE(with prod 29)]
 [term 15:REDUCE(with prod 29)] [term 30:REDUCE(with prod 29)]
 [term 31:REDUCE(with prod 29)] [term 35:REDUCE(with prod 29)]
From state #19
 [term 31:SHIFT(to state 20)]
From state #20
 [term 0:REDUCE(with prod 3)] [term 4:REDUCE(with prod 3)]
From state #21
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #22
 [term 12:SHIFT(to state 62)] [term 35:SHIFT(to state 4)]
From state #23
 [term 19:REDUCE(with prod 44)] [term 21:REDUCE(with prod 44)]
 [term 22:REDUCE(with prod 44)] [term 23:REDUCE(with prod 44)]
 [term 24:REDUCE(with prod 44)] [term 27:REDUCE(with prod 44)]
 [term 28:REDUCE(with prod 44)] [term 29:REDUCE(with prod 44)]
 [term 32:REDUCE(with prod 44)] [term 33:REDUCE(with prod 44)]
 [term 34:REDUCE(with prod 44)]
From state #24
 [term 19:REDUCE(with prod 43)] [term 21:REDUCE(with prod 43)]
 [term 22:REDUCE(with prod 43)] [term 23:REDUCE(with prod 43)]
 [term 24:REDUCE(with prod 43)] [term 27:REDUCE(with prod 43)]
 [term 28:REDUCE(with prod 43)] [term 29:REDUCE(with prod 43)]
 [term 32:REDUCE(with prod 43)] [term 33:REDUCE(with prod 43)]
 [term 34:REDUCE(with prod 43)]
From state #25
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:SHIFT(to state 58)]
 [term 28:SHIFT(to state 34)] [term 34:SHIFT(to state 39)]
From state #26
 [term 19:REDUCE(with prod 45)] [term 21:REDUCE(with prod 45)]
 [term 22:REDUCE(with prod 45)] [term 23:REDUCE(with prod 45)]
 [term 24:REDUCE(with prod 45)] [term 27:REDUCE(with prod 45)]
 [term 28:REDUCE(with prod 45)] [term 29:REDUCE(with prod 45)]
 [term 32:REDUCE(with prod 45)] [term 33:REDUCE(with prod 45)]
 [term 34:REDUCE(with prod 45)]
From state #27
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #28
 [term 19:REDUCE(with prod 47)] [term 21:REDUCE(with prod 47)]
 [term 22:REDUCE(with prod 47)] [term 23:REDUCE(with prod 47)]
 [term 24:REDUCE(with prod 47)] [term 27:REDUCE(with prod 47)]
 [term 28:REDUCE(with prod 47)] [term 29:REDUCE(with prod 47)]
 [term 32:REDUCE(with prod 47)] [term 33:REDUCE(with prod 47)]
 [term 34:REDUCE(with prod 47)]
From state #29
 [term 19:REDUCE(with prod 46)] [term 21:REDUCE(with prod 46)]
 [term 22:REDUCE(with prod 46)] [term 23:REDUCE(with prod 46)]
 [term 24:REDUCE(with prod 46)] [term 27:REDUCE(with prod 46)]
 [term 28:REDUCE(with prod 46)] [term 29:REDUCE(with prod 46)]
 [term 32:REDUCE(with prod 46)] [term 33:REDUCE(with prod 46)]
 [term 34:REDUCE(with prod 46)]
From state #30
 [term 19:REDUCE(with prod 42)] [term 21:REDUCE(with prod 42)]
 [term 22:REDUCE(with prod 42)] [term 23:REDUCE(with prod 42)]
 [term 24:REDUCE(with prod 42)] [term 27:REDUCE(with prod 42)]
 [term 28:REDUCE(with prod 42)] [term 29:REDUCE(with prod 42)]
 [term 32:REDUCE(with prod 42)] [term 33:REDUCE(with prod 42)]
 [term 34:REDUCE(with prod 42)]
From state #31
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #32
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:SHIFT(to state 35)]
 [term 28:SHIFT(to state 34)] [term 34:SHIFT(to state 39)]
From state #33
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #34
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #35
 [term 19:REDUCE(with prod 41)] [term 21:REDUCE(with prod 41)]
 [term 22:REDUCE(with prod 41)] [term 23:REDUCE(with prod 41)]
 [term 24:REDUCE(with prod 41)] [term 27:REDUCE(with prod 41)]
 [term 28:REDUCE(with prod 41)] [term 29:REDUCE(with prod 41)]
 [term 32:REDUCE(with prod 41)] [term 33:REDUCE(with prod 41)]
 [term 34:REDUCE(with prod 41)]
From state #36
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #37
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #38
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #39
 [term 11:SHIFT(to state 42)] [term 35:SHIFT(to state 4)]
From state #40
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #41
 [term 19:REDUCE(with prod 37)] [term 21:REDUCE(with prod 37)]
 [term 22:REDUCE(with prod 37)] [term 23:REDUCE(with prod 37)]
 [term 24:REDUCE(with prod 37)] [term 27:REDUCE(with prod 37)]
 [term 28:SHIFT(to state 34)] [term 29:REDUCE(with prod 37)]
 [term 32:REDUCE(with prod 37)] [term 33:REDUCE(with prod 37)]
 [term 34:SHIFT(to state 39)]
From state #42
 [term 19:REDUCE(with prod 40)] [term 21:REDUCE(with prod 40)]
 [term 22:REDUCE(with prod 40)] [term 23:REDUCE(with prod 40)]
 [term 24:REDUCE(with prod 40)] [term 27:REDUCE(with prod 40)]
 [term 28:REDUCE(with prod 40)] [term 29:REDUCE(with prod 40)]
 [term 32:REDUCE(with prod 40)] [term 33:REDUCE(with prod 40)]
 [term 34:REDUCE(with prod 40)]
From state #43
 [term 26:SHIFT(to state 44)]
From state #44
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 27:SHIFT(to state 47)] [term 35:SHIFT(to state 29)]
 [term 36:SHIFT(to state 30)] [term 37:SHIFT(to state 24)]
From state #45
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:REDUCE(with prod 18)]
 [term 28:SHIFT(to state 34)] [term 33:REDUCE(with prod 18)]
 [term 34:SHIFT(to state 39)]
From state #46
 [term 27:SHIFT(to state 49)] [term 33:SHIFT(to state 48)]
From state #47
 [term 19:REDUCE(with prod 51)] [term 21:REDUCE(with prod 51)]
 [term 22:REDUCE(with prod 51)] [term 23:REDUCE(with prod 51)]
 [term 24:REDUCE(with prod 51)] [term 27:REDUCE(with prod 51)]
 [term 28:REDUCE(with prod 51)] [term 29:REDUCE(with prod 51)]
 [term 32:REDUCE(with prod 51)] [term 33:REDUCE(with prod 51)]
 [term 34:REDUCE(with prod 51)]
From state #48
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #49
 [term 19:REDUCE(with prod 52)] [term 21:REDUCE(with prod 52)]
 [term 22:REDUCE(with prod 52)] [term 23:REDUCE(with prod 52)]
 [term 24:REDUCE(with prod 52)] [term 27:REDUCE(with prod 52)]
 [term 28:REDUCE(with prod 52)] [term 29:REDUCE(with prod 52)]
 [term 32:REDUCE(with prod 52)] [term 33:REDUCE(with prod 52)]
 [term 34:REDUCE(with prod 52)]
From state #50
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:REDUCE(with prod 19)]
 [term 28:SHIFT(to state 34)] [term 33:REDUCE(with prod 19)]
 [term 34:SHIFT(to state 39)]
From state #51
 [term 19:REDUCE(with prod 36)] [term 21:REDUCE(with prod 36)]
 [term 22:REDUCE(with prod 36)] [term 23:REDUCE(with prod 36)]
 [term 24:SHIFT(to state 40)] [term 27:REDUCE(with prod 36)]
 [term 28:SHIFT(to state 34)] [term 29:REDUCE(with prod 36)]
 [term 32:REDUCE(with prod 36)] [term 33:REDUCE(with prod 36)]
 [term 34:SHIFT(to state 39)]
From state #52
 [term 19:REDUCE(with prod 35)] [term 21:REDUCE(with prod 35)]
 [term 22:REDUCE(with prod 35)] [term 23:REDUCE(with prod 35)]
 [term 24:SHIFT(to state 40)] [term 27:REDUCE(with prod 35)]
 [term 28:SHIFT(to state 34)] [term 29:REDUCE(with prod 35)]
 [term 32:REDUCE(with prod 35)] [term 33:REDUCE(with prod 35)]
 [term 34:SHIFT(to state 39)]
From state #53
 [term 19:SHIFT(to state 37)] [term 21:REDUCE(with prod 38)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:REDUCE(with prod 38)]
 [term 28:SHIFT(to state 34)] [term 29:REDUCE(with prod 38)]
 [term 32:REDUCE(with prod 38)] [term 33:REDUCE(with prod 38)]
 [term 34:SHIFT(to state 39)]
From state #54
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 28:SHIFT(to state 34)]
 [term 29:SHIFT(to state 55)] [term 34:SHIFT(to state 39)]
From state #55
 [term 19:REDUCE(with prod 34)] [term 21:REDUCE(with prod 34)]
 [term 22:REDUCE(with prod 34)] [term 23:REDUCE(with prod 34)]
 [term 24:REDUCE(with prod 34)] [term 27:REDUCE(with prod 34)]
 [term 28:REDUCE(with prod 34)] [term 29:REDUCE(with prod 34)]
 [term 32:REDUCE(with prod 34)] [term 33:REDUCE(with prod 34)]
 [term 34:REDUCE(with prod 34)]
From state #56
 [term 19:SHIFT(to state 37)] [term 21:REDUCE(with prod 39)]
 [term 22:REDUCE(with prod 39)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:REDUCE(with prod 39)]
 [term 28:SHIFT(to state 34)] [term 29:REDUCE(with prod 39)]
 [term 32:REDUCE(with prod 39)] [term 33:REDUCE(with prod 39)]
 [term 34:SHIFT(to state 39)]
From state #57
 [term 19:SHIFT(to state 37)] [term 21:REDUCE(with prod 50)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:REDUCE(with prod 50)]
 [term 28:SHIFT(to state 34)] [term 29:REDUCE(with prod 50)]
 [term 32:REDUCE(with prod 50)] [term 33:REDUCE(with prod 50)]
 [term 34:SHIFT(to state 39)]
From state #58
 [term 7:SHIFT(to state 16)] [term 9:SHIFT(to state 11)]
 [term 10:SHIFT(to state 13)] [term 30:SHIFT(to state 12)]
 [term 35:SHIFT(to state 4)]
From state #59
 [term 8:SHIFT(to state 60)]
From state #60
 [term 7:SHIFT(to state 16)] [term 9:SHIFT(to state 11)]
 [term 10:SHIFT(to state 13)] [term 30:SHIFT(to state 12)]
 [term 35:SHIFT(to state 4)]
From state #61
 [term 7:REDUCE(with prod 26)] [term 8:REDUCE(with prod 26)]
 [term 9:REDUCE(with prod 26)] [term 10:REDUCE(with prod 26)]
 [term 15:REDUCE(with prod 26)] [term 30:REDUCE(with prod 26)]
 [term 31:REDUCE(with prod 26)] [term 35:REDUCE(with prod 26)]
From state #62
 [term 28:SHIFT(to state 66)]
From state #63
 [term 26:SHIFT(to state 64)]
From state #64
 [term 27:SHIFT(to state 65)]
From state #65
 [term 19:REDUCE(with prod 49)] [term 21:REDUCE(with prod 49)]
 [term 22:REDUCE(with prod 49)] [term 23:REDUCE(with prod 49)]
 [term 24:REDUCE(with prod 49)] [term 27:REDUCE(with prod 49)]
 [term 28:REDUCE(with prod 49)] [term 29:REDUCE(with prod 49)]
 [term 32:REDUCE(with prod 49)] [term 33:REDUCE(with prod 49)]
 [term 34:REDUCE(with prod 49)]
From state #66
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #67
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 28:SHIFT(to state 34)]
 [term 29:SHIFT(to state 68)] [term 34:SHIFT(to state 39)]
From state #68
 [term 19:REDUCE(with prod 48)] [term 21:REDUCE(with prod 48)]
 [term 22:REDUCE(with prod 48)] [term 23:REDUCE(with prod 48)]
 [term 24:REDUCE(with prod 48)] [term 27:REDUCE(with prod 48)]
 [term 28:REDUCE(with prod 48)] [term 29:REDUCE(with prod 48)]
 [term 32:REDUCE(with prod 48)] [term 33:REDUCE(with prod 48)]
 [term 34:REDUCE(with prod 48)]
From state #69
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #70
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #71
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 28:SHIFT(to state 34)]
 [term 32:SHIFT(to state 72)] [term 34:SHIFT(to state 39)]
From state #72
 [term 7:REDUCE(with prod 31)] [term 8:REDUCE(with prod 31)]
 [term 9:REDUCE(with prod 31)] [term 10:REDUCE(with prod 31)]
 [term 15:REDUCE(with prod 31)] [term 30:REDUCE(with prod 31)]
 [term 31:REDUCE(with prod 31)] [term 35:REDUCE(with prod 31)]
From state #73
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 28:SHIFT(to state 34)]
 [term 29:SHIFT(to state 74)] [term 34:SHIFT(to state 39)]
From state #74
 [term 20:SHIFT(to state 75)]
From state #75
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #76
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 28:SHIFT(to state 34)]
 [term 32:SHIFT(to state 77)] [term 34:SHIFT(to state 39)]
From state #77
 [term 7:REDUCE(with prod 32)] [term 8:REDUCE(with prod 32)]
 [term 9:REDUCE(with prod 32)] [term 10:REDUCE(with prod 32)]
 [term 15:REDUCE(with prod 32)] [term 30:REDUCE(with prod 32)]
 [term 31:REDUCE(with prod 32)] [term 35:REDUCE(with prod 32)]
From state #78
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #79
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:SHIFT(to state 80)]
 [term 28:SHIFT(to state 34)] [term 34:SHIFT(to state 39)]
From state #80
 [term 32:SHIFT(to state 81)]
From state #81
 [term 7:REDUCE(with prod 28)] [term 8:REDUCE(with prod 28)]
 [term 9:REDUCE(with prod 28)] [term 10:REDUCE(with prod 28)]
 [term 15:REDUCE(with prod 28)] [term 30:REDUCE(with prod 28)]
 [term 31:REDUCE(with prod 28)] [term 35:REDUCE(with prod 28)]
From state #82
 [term 31:SHIFT(to state 85)]
From state #83
 [term 7:SHIFT(to state 16)] [term 9:SHIFT(to state 11)]
 [term 10:SHIFT(to state 13)] [term 15:REDUCE(with prod 16)]
 [term 30:SHIFT(to state 12)] [term 31:REDUCE(with prod 16)]
 [term 35:SHIFT(to state 4)]
From state #84
 [term 15:REDUCE(with prod 17)] [term 31:REDUCE(with prod 17)]
From state #85
 [term 7:REDUCE(with prod 25)] [term 8:REDUCE(with prod 25)]
 [term 9:REDUCE(with prod 25)] [term 10:REDUCE(with prod 25)]
 [term 15:REDUCE(with prod 25)] [term 30:REDUCE(with prod 25)]
 [term 31:REDUCE(with prod 25)] [term 35:REDUCE(with prod 25)]
From state #86
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #87
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 27:SHIFT(to state 88)]
 [term 28:SHIFT(to state 34)] [term 34:SHIFT(to state 39)]
From state #88
 [term 7:SHIFT(to state 16)] [term 9:SHIFT(to state 11)]
 [term 10:SHIFT(to state 13)] [term 30:SHIFT(to state 12)]
 [term 35:SHIFT(to state 4)]
From state #89
 [term 7:REDUCE(with prod 27)] [term 8:REDUCE(with prod 27)]
 [term 9:REDUCE(with prod 27)] [term 10:REDUCE(with prod 27)]
 [term 15:REDUCE(with prod 27)] [term 30:REDUCE(with prod 27)]
 [term 31:REDUCE(with prod 27)] [term 35:REDUCE(with prod 27)]
From state #90
 [term 0:REDUCE(with prod 2)] [term 4:REDUCE(with prod 2)]
From state #91
 [term 35:SHIFT(to state 4)]
From state #92
 [term 0:REDUCE(with prod 1)]
From state #93
 [term 5:SHIFT(to state 94)] [term 30:SHIFT(to state 95)]
From state #94
 [term 35:SHIFT(to state 4)]
From state #95
 [term 2:REDUCE(with prod 8)] [term 6:REDUCE(with prod 8)]
 [term 12:REDUCE(with prod 8)] [term 13:REDUCE(with prod 8)]
 [term 31:REDUCE(with prod 8)] [term 35:REDUCE(with prod 8)]
From state #96
 [term 2:REDUCE(with prod 10)] [term 6:SHIFT(to state 101)]
 [term 12:SHIFT(to state 100)] [term 13:SHIFT(to state 103)]
 [term 31:REDUCE(with prod 10)] [term 35:SHIFT(to state 4)]
From state #97
 [term 35:SHIFT(to state 4)]
From state #98
 [term 2:REDUCE(with prod 7)] [term 6:REDUCE(with prod 7)]
 [term 7:REDUCE(with prod 7)] [term 9:REDUCE(with prod 7)]
 [term 10:REDUCE(with prod 7)] [term 12:REDUCE(with prod 7)]
 [term 13:REDUCE(with prod 7)] [term 15:REDUCE(with prod 7)]
 [term 30:REDUCE(with prod 7)] [term 31:REDUCE(with prod 7)]
 [term 35:REDUCE(with prod 7)]
From state #99
 [term 2:SHIFT(to state 108)] [term 31:SHIFT(to state 106)]
From state #100
 [term 28:SHIFT(to state 104)] [term 35:REDUCE(with prod 20)]
From state #101
 [term 35:REDUCE(with prod 21)]
From state #102
 [term 35:REDUCE(with prod 24)]
From state #103
 [term 35:REDUCE(with prod 22)]
From state #104
 [term 29:SHIFT(to state 105)]
From state #105
 [term 35:REDUCE(with prod 23)]
From state #106
 [term 0:REDUCE(with prod 4)] [term 4:REDUCE(with prod 4)]
From state #107
 [term 2:REDUCE(with prod 9)] [term 31:REDUCE(with prod 9)]
From state #108
 [term 6:SHIFT(to state 101)] [term 12:SHIFT(to state 100)]
 [term 13:SHIFT(to state 103)] [term 35:SHIFT(to state 4)]
From state #109
 [term 35:SHIFT(to state 4)]
From state #110
 [term 26:SHIFT(to state 111)]
From state #111
 [term 6:SHIFT(to state 101)] [term 12:SHIFT(to state 100)]
 [term 13:SHIFT(to state 103)] [term 27:SHIFT(to state 114)]
 [term 35:SHIFT(to state 4)]
From state #112
 [term 35:SHIFT(to state 4)]
From state #113
 [term 27:REDUCE(with prod 13)] [term 33:REDUCE(with prod 13)]
From state #114
 [term 30:SHIFT(to state 127)]
From state #115
 [term 27:SHIFT(to state 117)] [term 33:SHIFT(to state 116)]
From state #116
 [term 6:SHIFT(to state 101)] [term 12:SHIFT(to state 100)]
 [term 13:SHIFT(to state 103)] [term 35:SHIFT(to state 4)]
From state #117
 [term 30:SHIFT(to state 118)]
From state #118
 [term 6:REDUCE(with prod 8)] [term 7:REDUCE(with prod 8)]
 [term 9:REDUCE(with prod 8)] [term 10:REDUCE(with prod 8)]
 [term 12:REDUCE(with prod 8)] [term 13:REDUCE(with prod 8)]
 [term 15:REDUCE(with prod 8)] [term 30:REDUCE(with prod 8)]
 [term 35:REDUCE(with prod 8)]
From state #119
 [term 6:SHIFT(to state 101)] [term 7:SHIFT(to state 16)]
 [term 9:SHIFT(to state 11)] [term 10:SHIFT(to state 13)]
 [term 12:SHIFT(to state 100)] [term 13:SHIFT(to state 103)]
 [term 15:REDUCE(with prod 16)] [term 30:SHIFT(to state 12)]
 [term 35:SHIFT(to state 4)]
From state #120
 [term 15:SHIFT(to state 122)]
From state #121
 [term 20:SHIFT(to state 70)] [term 28:SHIFT(to state 69)]
 [term 35:REDUCE(with prod 24)]
From state #122
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #123
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 28:SHIFT(to state 34)]
 [term 32:SHIFT(to state 124)] [term 34:SHIFT(to state 39)]
From state #124
 [term 31:SHIFT(to state 125)]
From state #125
 [term 2:REDUCE(with prod 12)] [term 31:REDUCE(with prod 12)]
From state #126
 [term 27:REDUCE(with prod 14)] [term 33:REDUCE(with prod 14)]
From state #127
 [term 6:REDUCE(with prod 8)] [term 7:REDUCE(with prod 8)]
 [term 9:REDUCE(with prod 8)] [term 10:REDUCE(with prod 8)]
 [term 12:REDUCE(with prod 8)] [term 13:REDUCE(with prod 8)]
 [term 15:REDUCE(with prod 8)] [term 30:REDUCE(with prod 8)]
 [term 35:REDUCE(with prod 8)]
From state #128
 [term 6:SHIFT(to state 101)] [term 7:SHIFT(to state 16)]
 [term 9:SHIFT(to state 11)] [term 10:SHIFT(to state 13)]
 [term 12:SHIFT(to state 100)] [term 13:SHIFT(to state 103)]
 [term 15:REDUCE(with prod 16)] [term 30:SHIFT(to state 12)]
 [term 35:SHIFT(to state 4)]
From state #129
 [term 15:SHIFT(to state 130)]
From state #130
 [term 14:SHIFT(to state 22)] [term 16:SHIFT(to state 28)]
 [term 17:SHIFT(to state 23)] [term 18:SHIFT(to state 26)]
 [term 25:SHIFT(to state 27)] [term 26:SHIFT(to state 31)]
 [term 35:SHIFT(to state 29)] [term 36:SHIFT(to state 30)]
 [term 37:SHIFT(to state 24)]
From state #131
 [term 19:SHIFT(to state 37)] [term 21:SHIFT(to state 36)]
 [term 22:SHIFT(to state 33)] [term 23:SHIFT(to state 38)]
 [term 24:SHIFT(to state 40)] [term 28:SHIFT(to state 34)]
 [term 32:SHIFT(to state 132)] [term 34:SHIFT(to state 39)]
From state #132
 [term 31:SHIFT(to state 133)]
From state #133
 [term 2:REDUCE(with prod 11)] [term 31:REDUCE(with prod 11)]
From state #134
 [term 27:REDUCE(with prod 15)] [term 33:REDUCE(with prod 15)]
From state #135
 [term 32:SHIFT(to state 136)]
From state #136
 [term 2:REDUCE(with prod 6)] [term 6:REDUCE(with prod 6)]
 [term 7:REDUCE(with prod 6)] [term 9:REDUCE(with prod 6)]
 [term 10:REDUCE(with prod 6)] [term 12:REDUCE(with prod 6)]
 [term 13:REDUCE(with prod 6)] [term 15:REDUCE(with prod 6)]
 [term 30:REDUCE(with prod 6)] [term 31:REDUCE(with prod 6)]
 [term 35:REDUCE(with prod 6)]
From state #137
 [term 30:SHIFT(to state 138)]
From state #138
 [term 2:REDUCE(with prod 8)] [term 6:REDUCE(with prod 8)]
 [term 12:REDUCE(with prod 8)] [term 13:REDUCE(with prod 8)]
 [term 31:REDUCE(with prod 8)] [term 35:REDUCE(with prod 8)]
From state #139
 [term 2:REDUCE(with prod 10)] [term 6:SHIFT(to state 101)]
 [term 12:SHIFT(to state 100)] [term 13:SHIFT(to state 103)]
 [term 31:REDUCE(with prod 10)] [term 35:SHIFT(to state 4)]
From state #140
 [term 2:SHIFT(to state 108)] [term 31:SHIFT(to state 141)]
From state #141
 [term 0:REDUCE(with prod 5)] [term 4:REDUCE(with prod 5)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 6->state 2]
From state #1
 [non term 7->state 90]
From state #2
From state #3
 [non term 4->state 5]
From state #4
From state #5
From state #6
From state #7
 [non term 4->state 8]
From state #8
From state #9
From state #10
 [non term 1->state 17] [non term 2->state 18] [non term 4->state 15]
 [non term 15->state 14]
From state #11
From state #12
 [non term 1->state 83] [non term 2->state 18] [non term 4->state 15]
 [non term 14->state 82] [non term 15->state 14]
From state #13
From state #14
From state #15
From state #16
From state #17
From state #18
From state #19
From state #20
From state #21
 [non term 3->state 25]
From state #22
 [non term 4->state 63]
From state #23
From state #24
From state #25
From state #26
From state #27
 [non term 3->state 57]
From state #28
From state #29
From state #30
From state #31
 [non term 3->state 32]
From state #32
From state #33
 [non term 3->state 56]
From state #34
 [non term 3->state 54]
From state #35
From state #36
 [non term 3->state 53]
From state #37
 [non term 3->state 52]
From state #38
 [non term 3->state 51]
From state #39
 [non term 4->state 43]
From state #40
 [non term 3->state 41]
From state #41
From state #42
From state #43
From state #44
 [non term 3->state 45] [non term 16->state 46]
From state #45
From state #46
From state #47
From state #48
 [non term 3->state 50]
From state #49
From state #50
From state #51
From state #52
From state #53
From state #54
From state #55
From state #56
From state #57
From state #58
 [non term 1->state 59] [non term 2->state 18] [non term 4->state 15]
 [non term 15->state 14]
From state #59
From state #60
 [non term 1->state 61] [non term 2->state 18] [non term 4->state 15]
 [non term 15->state 14]
From state #61
From state #62
From state #63
From state #64
From state #65
From state #66
 [non term 3->state 67]
From state #67
From state #68
From state #69
 [non term 3->state 73]
From state #70
 [non term 3->state 71]
From state #71
From state #72
From state #73
From state #74
From state #75
 [non term 3->state 76]
From state #76
From state #77
From state #78
 [non term 3->state 79]
From state #79
From state #80
From state #81
From state #82
From state #83
 [non term 1->state 83] [non term 2->state 18] [non term 4->state 15]
 [non term 14->state 84] [non term 15->state 14]
From state #84
From state #85
From state #86
 [non term 3->state 87]
From state #87
From state #88
 [non term 1->state 89] [non term 2->state 18] [non term 4->state 15]
 [non term 15->state 14]
From state #89
From state #90
From state #91
 [non term 4->state 93]
From state #92
From state #93
From state #94
 [non term 4->state 137]
From state #95
 [non term 9->state 96]
From state #96
 [non term 4->state 102] [non term 5->state 97] [non term 8->state 98]
 [non term 11->state 99]
From state #97
 [non term 4->state 135]
From state #98
From state #99
 [non term 10->state 107]
From state #100
From state #101
From state #102
From state #103
From state #104
From state #105
From state #106
From state #107
From state #108
 [non term 4->state 102] [non term 5->state 109]
From state #109
 [non term 4->state 110]
From state #110
From state #111
 [non term 4->state 102] [non term 5->state 112] [non term 12->state 115]
 [non term 13->state 113]
From state #112
 [non term 4->state 134]
From state #113
From state #114
From state #115
From state #116
 [non term 4->state 102] [non term 5->state 112] [non term 13->state 126]
From state #117
From state #118
 [non term 9->state 119]
From state #119
 [non term 1->state 83] [non term 2->state 18] [non term 4->state 121]
 [non term 5->state 97] [non term 8->state 98] [non term 14->state 120]
 [non term 15->state 14]
From state #120
From state #121
From state #122
 [non term 3->state 123]
From state #123
From state #124
From state #125
From state #126
From state #127
 [non term 9->state 128]
From state #128
 [non term 1->state 83] [non term 2->state 18] [non term 4->state 121]
 [non term 5->state 97] [non term 8->state 98] [non term 14->state 129]
 [non term 15->state 14]
From state #129
From state #130
 [non term 3->state 131]
From state #131
From state #132
From state #133
From state #134
From state #135
From state #136
From state #137
From state #138
 [non term 9->state 139]
From state #139
 [non term 4->state 102] [non term 5->state 97] [non term 8->state 98]
 [non term 11->state 140]
From state #140
 [non term 10->state 107]
From state #141
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 0 warnings
  38 terminals, 17 non-terminals, and 53 productions declared, 
  producing 142 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
